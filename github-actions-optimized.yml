name: Deploy Weather AI App (Optimized)

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Enable Docker Buildx caching (for faster rebuilds)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Docker Hub login (for private caching or pushing)
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build Docker image (locally cached, not pushed)
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.optimized
        platforms: linux/amd64
        push: false
        load: true
        tags: weather-ai-app:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Deploy to EC2
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "ðŸš€ Starting deployment on EC2..."

          # Stop old container (if any)
          docker stop weather-ai-app || true
          docker rm weather-ai-app || true

          # Update repo (pull latest)
          cd /home/${{ secrets.EC2_USER }}/weather-app || git clone https://github.com/rakesh580/Weather_App.git /home/${{ secrets.EC2_USER }}/weather-app
          cd /home/${{ secrets.EC2_USER }}/weather-app
          git pull origin main

          # Create .env file dynamically from GitHub Secrets
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" > .env
          echo "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}" >> .env
          echo "PINECONE_ENVIRONMENT=${{ secrets.PINECONE_ENVIRONMENT }}" >> .env
          echo "OPENWEATHER_API_KEY=${{ secrets.OPENWEATHER_API_KEY }}" >> .env

          # Build Docker image from optimized Dockerfile
          docker build -f Dockerfile.optimized -t weather-ai-app .

          # Run container with environment file
          docker run -d \
            --name weather-ai-app \
            --restart unless-stopped \
            -p 80:9000 \
            --env-file .env \
            weather-ai-app

          # Cleanup unused images to save space
          docker image prune -f

          echo "âœ… Deployment completed successfully!"